<?php
/**
 * @file
 * Code fo tha betta
 */


/**
 * Implements hook_init().
 */
function media_wysiwyg_smart_tokens_init() {
    /**
     * Add css stylesheet to the front pages so that the editor styles match the wysiwyg.
     */
   drupal_add_css(drupal_get_path('module', 'media_wysiwyg_smart_tokens') . '/css/display.css');
}

/**
 * Implements hook_element_info_alter().
 */
function media_wysiwyg_smart_tokens_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'media_wysiwyg_smart_tokens_pre_render_text_format';
}


/**
 * Process function for adding necessary js to the editor.
 */
function media_wysiwyg_smart_tokens_pre_render_text_format($element) {

  // Load our handling of media tokens into the editor.
  if (module_exists('wysiwyg')) {
    $path = drupal_get_path('module', 'media_wysiwyg_smart_tokens');
    drupal_add_js($path . '/js/media_wysiwyg_smart_tokens.js', array('scope' => 'footer'));
  }

  // Load our handling of media tokens into the editor.
  if (module_exists('ckeditor')) {
    $path = drupal_get_path('module', 'media_wysiwyg_smart_tokens');
    drupal_add_js($path . '/js/media_ckeditor_smart_tokens.js', array('scope' => 'footer', 'weight' => -19));
  }

  return $element;
}

/**
 * [media_wysiwyg_smart_tokens_media_token_to_markup_alter description]
 * @param  [type] $element  [description]
 * @param  [type] $tag_info [description]
 * @param  [type] $settings [description]
 * @return [type]           [description]
 */
function media_wysiwyg_smart_tokens_media_token_to_markup_alter(&$element, $tag_info, $settings) {

    // If we are in the wyswiyg editor we need to add the additional fields
    // to the markup as it only renders the image 'as is'.

    if (isset($settings['wysiwyg']) && $settings['wysiwyg']) {
      $element['#theme'] = "smart_tokens_wysiwyg_theme_hijack";
    }

}

/**
 * Implements hook_theme().
 */
function media_wysiwyg_smart_tokens_theme() {
  return array(
    'smart_tokens_wysiwyg_theme_hijack' => array(
      'variables' => array(
        'file' => NULL,
        'attributes' => array(),
        'view_mode' => 'default',
      ),
    ),
  );
}

/**
 * Provides file entity rendering display for wysiwyg content.
 * @param  [type] $variables [file view mode and file attributes]
 * @return [type]            [the rendered entity html wrapped in a div]
 */
function theme_smart_tokens_wysiwyg_theme_hijack($variables) {

  $file = $variables['file'];
  file_build_content($file, $variables['view_mode']);
  unset($file->content['links']);

  if (!isset($file->content['#prefix'])) {
    $file->content['#prefix'] = "<div ";

    foreach ($variables['attributes'] as $k => $v) {
      $value = is_array($v) ? implode($v, " ") : $v;
      $file->content['#prefix'] .= $k . "=\"" . $value . "\" ";
    }

    $file->content['#prefix'] .= ">";
    $file->content['#suffix'] = "</div>";
  }

  $content = drupal_render($file->content);
  return $content;

}

/**
 * Implements hook_wysiwyg_editor_settings_alter()
 */
function media_wysiwyg_smart_tokens_wysiwyg_editor_settings_alter(&$settings, $context) {

  // The $context variable contains information about the wysiwyg profile we're using
  // In this case we just need to check that the editor being used is ckeditor.
  if ($context['profile']->editor == 'ckeditor') {
    $settings['contentsCss'][] = base_path() . drupal_get_path('module', 'media_wysiwyg_smart_tokens') . "/css/ck-editor.css";
  }


}

/**
 * [my_module_wysiwyg_plugin description]
 * @param  [type] $editor  [description]
 * @param  [type] $version [description]
 * @return [type]          [description]
 */
function media_wysiwyg_smart_tokens_wysiwyg_plugin($editor, $version) {

  switch ($editor) {
   case 'ckeditor':
    return array(
     'media_placeholder' => array(
      'path' => drupal_get_path('module', 'media_wysiwyg_smart_tokens') . '/js',
      'buttons' => array(
       'media_placeholder_button' => t('Media Smart Tokens'),
       'media_element_left' => t('Media Left'),
       'media_element_right' => t('Media Right'),
       'media_element_inline' => t('Media Inline'),
      ),
      'load' => TRUE,
     ),
    );
    break;
  }

 }
